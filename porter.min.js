const porter=function(){const c={enci:'ence',anci:'ance',abli:'able',entli:'ent',izer:'ize',ization:'ize',ation:'ate',ator:'ate',alism:'al',aliti:'al',alli:'al',fulness:'ful',ousli:'ous',ousness:'ous',iveness:'ive',iviti:'ive',biliti:'ble',bli:'ble',logi:'log',fulli:'ful',lessli:'less'},d={tional:'tion',ational:'ate',alize:'al',icate:'ic',iciti:'ic',ical:'ic',ful:'',ness:''},f=U=>'('+U+')',g='[aeiouy]',h='[^aeiou]',j=new RegExp('bdfgmnprt'.split('').map(U=>f(U)+U+'$').join('|')),k=g+h+'.*?',l=k+g+h+'.*?',p=/[^aeiou]*[^aeiou][aeiouy][^aeiouwxY]|$[aeiouy][^aeiou]/,q=U=>{return U.replace(/('s?'?)$/,'')},r=/(ss|i)es$|(i)ed$/,t=/([^su])s$/,u=new RegExp(f(k)+'eed(ly)*$'),w=new RegExp(f(g+'.*')+'(ed(ly)*|ing(ly)*)$'),y=/(at|bl|iz)$/,z=new RegExp(f('.'+h)+'(y|Y)'),A=U=>{return r.test(U)?U.replace(r,'$1$2'):U.replace(t,'$1')},B=U=>{if(u.test(U))return U.replace(u,'$1ee');if(w.test(U)){if(U=U.replace(w,'$1'),y.test(U))return U.replace(y,'$1e');if(j.test(U))return U.replace(j,'$1$2$3$4$5$6$7$8$9');if(p.test(U))return U+'e'}return U},C=U=>{return U.replace(z,'$1i')},D=Object.keys(c).sort((U,V)=>V.length-U.length).reduce((U,V)=>U+'|'+V),E=new RegExp(f('^.+?'+k)+f(D)+'$'),F=/(.+?[aeiouy][^aeiou].*?[cdeghkmnrt])li$/,G=U=>{const V=E.exec(U);return null===V?U.replace(F,'$1'):V[1]+c[V[2]]},H=Object.keys(d).sort((U,V)=>V.length-U.length).reduce((U,V)=>U+'|'+V),I=new RegExp(f('^.+?'+k)+f(H)+'$'),J=new RegExp(f(l)+'ative$'),K=U=>{const V=I.exec(U);return null===V?U.replace(J,'$1'):V[1]+d[V[2]]},L=['al','ance','ence','er','ic','able','ible','ant','ement','ment','ent','ism','ate','iti','ous','ive','ize','sion','tion'].sort((U,V)=>V.length-U.length).reduce((U,V)=>U+'|'+V),M=new RegExp(f(l)+f(L)+'$'),N=U=>{return U.replace(M,'$1')},O=new RegExp(f(l+'l')+'l$'),P=f('?!'+f(h+g+'[^aeiouwxY]'+'|'+('$'+g+h))),Q=new RegExp(f(f(l)+'|'+f(k+P))+'e$'),R=U=>{return O.test(U)?U.replace(O,'$1'):U.replace(Q,'$1')},S=U=>{return 2>=U.length?U:(U=U.replace(/^\'/,''),U=U.replace(/^y|[aeiouy]y/g,'Y'),U=q(U),U=A(U),U=B(U),U=C(U),U=G(U),U=K(U),U=N(U),U=R(U),U.replace(/Y/g,'y'))};return{stem_word:S,stem:U=>{return'string'==typeof U&&(U=$.trim(U.toLowerCase().replace(/(\s|[^a-z'])+/g,' ')).split(' ')),U.map(S)}}}();
