const porter=function(){const c={enci:'ence',anci:'ance',abli:'able',entli:'ent',izer:'ize',ization:'ize',ation:'ate',ator:'ate',alism:'al',aliti:'al',alli:'al',fulness:'ful',ousli:'ous',ousness:'ous',iveness:'ive',iviti:'ive',biliti:'ble',bli:'ble',logi:'log',fulli:'ful',lessli:'less'},d={tional:'tion',ational:'ate',alize:'al',icate:'ic',iciti:'ic',ical:'ic',ful:'',ness:''},f=T=>'('+T+')',g='[aeiouy]',h='[^aeiou]',j=new RegExp('bdfgmnprt'.split('').map(T=>f(T)+T+'$').join('|')),k=g+h+'.*?',l=k+g+h+'.*?',p=/[^aeiou]*[^aeiou][aeiouy][^aeiouwxY]|$[aeiouy][^aeiou]/,q=T=>{return T.replace(/('s?'?)$/,'')},r=/(ss|i)es$|(i)ed$/,t=/([^su])s$/,u=new RegExp(f(k)+'eed(ly)*$'),w=new RegExp(f(g+'.*')+'(ed(ly)*|ing(ly)*)$'),y=/(at|bl|iz)$/,z=new RegExp(f('.'+h)+'(y|Y)'),A=T=>{return r.test(T)?T.replace(r,'$1$2'):T.replace(t,'$1')},B=T=>{if(u.test(T))return T.replace(u,'$1ee');if(w.test(T)){if(T=T.replace(w,'$1'),y.test(T))return T.replace(y,'$1e');if(j.test(T))return T.replace(j,'$1$2$3$4$5$6$7$8$9');if(p.test(T))return T+'e'}return T},C=T=>{return T.replace(z,'$1i')},D=Object.keys(c).sort((T,U)=>U.length-T.length).reduce((T,U)=>T+'|'+U),E=new RegExp(f('^.+?'+k)+f(D)+'$'),F=/(.+?[aeiouy][^aeiou].*?[cdeghkmnrt])li$/,G=T=>{const U=E.exec(T);return null===U?T.replace(F,'$1'):U[1]+c[U[2]]},H=Object.keys(d).sort((T,U)=>U.length-T.length).reduce((T,U)=>T+'|'+U),I=new RegExp(f('^.+?'+k)+f(H)+'$'),J=new RegExp(f(l)+'ative$'),K=T=>{const U=I.exec(T);return null===U?T.replace(J,'$1'):U[1]+d[U[2]]},L=['al','ance','ence','er','ic','able','ible','ant','ement','ment','ent','ism','ate','iti','ous','ive','ize','sion','tion'].sort((T,U)=>U.length-T.length).reduce((T,U)=>T+'|'+U),M=new RegExp(f(l)+f(L)+'$'),N=T=>{return T.replace(M,'$1')},O=new RegExp(f(l+'l')+'l$'),P=new RegExp(f(f(l)+'|'+f(k+(h+g+'[^aeiouwxY]')))+'e$'),Q=T=>{return O.test(T)?T.replace(O,'$1'):T.replace(P,'$1')},R=T=>{return 2>=T.length?T:(T=T.replace(/^\'/,''),T=T.replace(/^y|([aeiouy])y/g,'$1Y'),T=q(T),T=A(T),T=B(T),T=C(T),T=G(T),T=K(T),T=N(T),T=Q(T),T.replace(/Y/g,'y'))};return{stem_word:R,stem:T=>{return'string'==typeof T&&(T=$.trim(T.toLowerCase().replace(/(\s|[^a-z'])+/g,' ')).split(' ')),T.map(R)}}}();
