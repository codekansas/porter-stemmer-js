const porter=function(){const c={enci:'ence',anci:'ance',abli:'able',entli:'ent',izer:'ize',ization:'ize',ation:'ate',ator:'ate',alism:'al',aliti:'al',alli:'al',fulness:'ful',ousli:'ous',ousness:'ous',iveness:'ive',iviti:'ive',biliti:'ble',bli:'ble',logi:'log',fulli:'ful',lessli:'less'},d={tional:'tion',ational:'ate',alize:'al',icate:'ic',iciti:'ic',ical:'ic',ful:'',ness:''},f=V=>'('+V+')',g='[aeiouy]',h='[^aeiou]',j=new RegExp('bdfgmnprt'.split('').map(V=>f(V)+V+'$').join('|')),k=g+h+'.*?',l=k+g+h+'.*?',p=/[^aeiou]*[^aeiou][aeiouy][^aeiouwxY]$|^[aeiouy][^aeiou]$/,q=V=>{return V.replace(/('s?'?)$/,'')},r=/(ss|i)es$|(i)ed$/,t=/([^su])s$/,u=new RegExp(f(k)+'eed(ly)*$'),w=new RegExp(f(g+'.*')+'(ed(ly)*|ing(ly)*)$'),y=/(at|bl|iz)$/,z=new RegExp(f('.'+h)+'(y|Y)$'),A=V=>{return r.test(V)?V.replace(r,'$1$2'):V.replace(t,'$1')},B=V=>{if(u.test(V))return V.replace(u,'$1ee');if(w.test(V)){if(V=V.replace(w,'$1'),y.test(V))return V.replace(y,'$1e');if(j.test(V))return V.replace(j,'$1$2$3$4$5$6$7$8$9');if(p.test(V))return V+'e'}return V},C=V=>{return V.replace(z,'$1i')},D=Object.keys(c).sort((V,W)=>W.length-V.length).reduce((V,W)=>V+'|'+W),E=new RegExp(f('^.+?'+k)+f(D)+'$'),F=/(.+?[aeiouy][^aeiou].*?[cdeghkmnrt])li$/,G=V=>{const W=E.exec(V);return null===W?V.replace(F,'$1'):W[1]+c[W[2]]},H=Object.keys(d).sort((V,W)=>W.length-V.length).reduce((V,W)=>V+'|'+W),I=new RegExp(f('^.+?'+k)+f(H)+'$'),J=new RegExp(f(l)+'ative$'),K=V=>{const W=I.exec(V);return null===W?V.replace(J,'$1'):W[1]+d[W[2]]},L=['al','ance','ence','er','ic','able','ible','ant','ement','ment','ent','ism','ate','iti','ous','ive','ize','sion','tion'].sort((V,W)=>W.length-V.length).reduce((V,W)=>V+'|'+W),M=new RegExp(f(l)+f(L)+'$'),N=V=>{return V.replace(M,'$1')},O=new RegExp(f(l+'l')+'l$'),P=new RegExp(f(l)+'e$'),Q=/[^aeiou][aeiouy][^aeiouwxY]e$/,R=new RegExp(f(k)+'e$'),S=V=>{return O.test(V)?V.replace(O,'$1'):P.test(V)?V.replace(P,'$1'):Q.test(V)?V:V.replace(R,'$1')},T=V=>{return 2>=V.length?V:(V=V.replace(/^\'/,''),V=V.replace(/^y|([aeiouy])y/g,'$1Y'),V=q(V),V=A(V),V=B(V),V=C(V),V=G(V),V=K(V),V=N(V),V=S(V),V.replace(/Y/g,'y'))};return{stem_word:T,stem:V=>{return'string'==typeof V&&(V=$.trim(V.toLowerCase().replace(/(\s|[^a-z'])+/g,' ')).split(' ')),V.map(T)}}}();
